<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.hicola</groupId>
    <artifactId>web-for-k8s-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>SpringBootWebForK8sDemo</name>
    <description>Demo of SpringBoot Web Project for K8s deployment</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.2</version>
        <relativePath/>
    </parent>


    <dependencies>
        <!--spring web-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <!--don't want the default logging: logback-->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--log4j-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <!--spring test kit-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.8.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>21.0</version>
        </dependency>
    </dependencies>

    <build>
        <!--use our project artifactId as the project name-->
        <finalName>${project.artifactId}</finalName>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--use the docker-maven-plugin-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--here special the image name that will be generated, we use <author name + project.artifactId> as our image name -->
                    <imageName>willisbai/${project.artifactId}</imageName>
                    <!--special the image version, we use the default value: latest-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <!--special the JDK1.8 as our base image-->
                    <baseImage>java</baseImage>
                    <!--Optional item, special the author info of the image-->
                    <maintainer>willis.bai@outlook.com</maintainer>
                    <!--switch to ROOT directory-->
                    <workdir>/ROOT</workdir>
                    <!--check the java version-->
                    <cmd>["java","-version"]</cmd>
                    <!--${project.build.finalName}.jar is the name of the generated jar package-->
                    <entryPoint>["java","-jar","/${project.build.finalName}.jar"]</entryPoint>
                    <!--special the remote docker api URL-->
                    <dockerHost>http://192.168.137.200:2375</dockerHost>

                    <!--here will copy the generated jar to the special directory-->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--the generated jar directory, here we configure the target path-->
                            <directory>${project.build.directory}</directory>
                            <!--special the files that will be copied, include jar package, here we use the jar name that mapped in the Dockfile-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
